generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(uuid())
  username     String          @unique
  email        String?         @unique
  passwordHash String
  name         String?
  role         Role            @default(athlete)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  settings     Json?
  tokens       RefreshToken[]
  athlete      Athlete?        @relation("UserAthlete")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String
  revoked   Boolean  @default(false)
  issuedAt  DateTime @default(now())
  expiresAt DateTime
}

model Athlete {
  id           String          @id @default(uuid())
  userId       String          @unique
  athleteCode  String          @unique
  name         String
  dob          DateTime?
  sport        String?
  gender       String?
  contactInfo  String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  user         User            @relation("UserAthlete", fields: [userId], references: [id], onDelete: Cascade)
  sessions     Session[]       @relation("AthleteSessions")
  assessments  Assessment[]
  injuries     Injury[]
  performances Performance[]
  attendance   Attendance[]
}

model Session {
  id            String          @id @default(uuid())
  name          String
  coachId       String?
  date          DateTime
  duration      Int?
  notes         String?
  institutionId String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  assessments   Assessment[]
  attendance    Attendance[]
  athletes      Athlete[]       @relation("AthleteSessions")
}

model Assessment {
  id            String    @id @default(uuid())
  athleteId     String
  athlete       Athlete   @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  sessionId     String?
  session       Session?  @relation(fields: [sessionId], references: [id])
  institutionId String?
  metric        String
  valueText     String?
  valueNumber   Float?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Performance {
  id             String    @id @default(uuid())
  athleteId      String
  athlete        Athlete   @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  assessmentType String
  score          Float
  date           DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Injury {
  id          String    @id @default(uuid())
  athleteId   String
  athlete     Athlete   @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  description String
  date        DateTime
  severity    Severity
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Attendance {
  id         String            @id @default(uuid())
  sessionId  String
  session    Session           @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  athleteId  String
  athlete    Athlete           @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  status     AttendanceStatus
  remarks    String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@unique([sessionId, athleteId])
}

enum Role {
  admin
  coach
  athlete
}

enum Severity {
  minor
  moderate
  severe
}

enum AttendanceStatus {
  present
  absent
  late
}