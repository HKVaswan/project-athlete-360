// prisma/schema.prisma
// Enterprise-grade Prisma schema for Project Athlete 360
// PostgreSQL is assumed. Set DATABASE_URL in .env before migrating.
//
// Commands:
//  - npx prisma generate
//  - npx prisma migrate dev --name init
//

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Adjust connection limit in deployment config if needed
}

enum Role {
  ATHLETE
  COACH
  ADMIN
  SUPER_ADMIN
  SYSTEM
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  SUSPENDED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  FAILED
  VOID
}

enum Attendance {
  PRESENT
  ABSENT
  EXCUSED
}

model User {
  id             String        @id @default(uuid())
  username       String        @unique
  email          String?       @unique
  passwordHash   String
  name           String?
  role           Role          @default(ATHLETE)
  institution    Institution?  @relation(fields: [institutionId], references: [id])
  institutionId  String?
  athlete        Athlete?
  coach          Coach?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  loginSessions  LoginSession[]
  refreshTokens  RefreshToken[]
  notifications  Notification[]
  // safe metadata
  meta           Json?         // for extensibility
}

model Institution {
  id                  String         @id @default(uuid())
  name                String
  code                String         @unique                 // short code used for invites
  domain              String?        @unique
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  users               User[]
  coaches             CoachInstitution[]
  athletes            Athlete[]
  subscriptions       Subscription[]
  usage               InstitutionUsage?
  paymentMethods      PaymentMethod[]
  invoices            Invoice[]
  systemBackups       SystemBackup[]
  // plan history: via Subscription relation
  meta                Json?
  @@index([code])
}

model Athlete {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @unique
  athleteCode  String    @unique
  name         String
  dob          DateTime?
  sport        String?
  gender       String?
  contactInfo  String?
  approved     Boolean   @default(false)
  institution  Institution? @relation(fields: [institutionId], references: [id])
  institutionId String?
  sessions     Session[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  meta         Json?
  @@index([athleteCode])
}

model Coach {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  coachCode   String    @unique
  name        String?
  institutions CoachInstitution[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  meta        Json?
}

model CoachInstitution {
  id            String      @id @default(uuid())
  coach         Coach       @relation(fields: [coachId], references: [id])
  coachId       String
  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String
  createdAt     DateTime    @default(now())

  @@unique([coachId, institutionId])
}

model Session {
  id             String    @id @default(uuid())
  athlete        Athlete   @relation(fields: [athleteId], references: [id])
  athleteId      String
  coachId        String?   // denormalised reference
  attendance     Attendance?
  performanceScore Float?  // normalized score
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  meta           Json?
  @@index([athleteId])
  @@index([createdAt])
}

model RefreshToken {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  tokenHash  String   // hashed token
  deviceInfo String?
  issuedAt   DateTime @default(now())
  expiresAt  DateTime
  revoked    Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([tokenHash])
}

model LoginSession {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  ipAddress  String?
  userAgent  String?
  loggedInAt DateTime @default(now())
  createdAt  DateTime @default(now())
  meta       Json?
}

//
// Billing & Plans
//

model Plan {
  id                  String   @id @default(uuid())
  sku                 String   @unique                // machine-friendly
  name                String
  description         String?
  priceMonthlyCents   Int      @default(0)            // in cents
  storageLimitBytes   BigInt   @default(0)            // hard cap per institution
  videoLimitPerMonth  Int      @default(0)            // count of video uploads per month
  athletesPerCoach    Int      @default(50)           // default limits
  coachesPerInstitution Int    @default(10)
  features            Json?
  isDefault           Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  subscriptions       Subscription[]
  @@index([sku])
}

model Subscription {
  id                String             @id @default(uuid())
  institution       Institution        @relation(fields: [institutionId], references: [id])
  institutionId     String
  plan              Plan               @relation(fields: [planId], references: [id])
  planId            String
  status            SubscriptionStatus @default(TRIALING)
  startDate         DateTime           @default(now())
  endDate           DateTime?
  nextBillingDate   DateTime?
  paymentProvider   String?             // stripe, razorpay, etc.
  providerCustomerId String?            // provider's customer id
  providerSubscriptionId String?        // provider subscription id
  usedFreeTrial     Boolean             @default(false)
  autoRenew         Boolean             @default(true)
  canceledAt        DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  invoices          Invoice[]
  @@index([institutionId])
  @@index([status])
}

model PaymentMethod {
  id                 String       @id @default(uuid())
  institution        Institution  @relation(fields: [institutionId], references: [id])
  institutionId      String
  provider           String       // stripe, razorpay
  providerPaymentId  String       // card id on provider
  cardBrand          String?
  last4              String?
  expMonth           Int?
  expYear            Int?
  enabled            Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@index([institutionId])
}

model Invoice {
  id                String       @id @default(uuid())
  institution       Institution  @relation(fields: [institutionId], references: [id])
  institutionId     String
  subscription      Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId    String?
  amountCents       Int
  currency          String       @default("INR")
  status            InvoiceStatus @default(PENDING)
  dueDate           DateTime?
  providerInvoiceId String?
  metadata          Json?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([institutionId])
  @@index([status])
}

//
// Usage & Quotas
//

model InstitutionUsage {
  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String       @id
  storageBytes  BigInt       @default(0)     // current storage (in bytes)
  videoCountMonth Int        @default(0)
  athletesCount Int          @default(0)
  coachesCount  Int          @default(0)
  lastReconciledAt DateTime?
  updatedAt     DateTime     @updatedAt
  meta          Json?
}

//
// Trial & Anti-abuse
//

model TrialAudit {
  id           String    @id @default(uuid())
  institution  Institution? @relation(fields: [institutionId], references: [id])
  institutionId String?
  fingerprint  String    // hashed device fingerprint / email hash / phone hash
  ip           String?
  createdAt    DateTime  @default(now())

  @@index([fingerprint])
  @@index([createdAt])
}

//
// Backups
//

model SystemBackup {
  id        String   @id @default(uuid())
  key       String   // s3 key
  sizeBytes BigInt
  checksum  String
  status    String   // uploaded, verified, failed, archived
  createdAt DateTime @default(now())

  institution Institution? @relation(fields: [institutionId], references: [id])
  institutionId String?
  meta      Json?
}

//
// Audit log (immutable chain)
//
model AuditLog {
  id           String   @id @default(uuid())
  actorId      String?
  actorRole    String?
  action       String
  entity       String?
  entityId     String?
  details      Json?
  metadata     Json?
  chainHash    String
  previousHash String?
  createdAt    DateTime @default(now())

  @@index([actorId])
  @@index([action])
  @@index([createdAt])
}

//
// Notifications (simple)
//
model Notification {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  type         String
  title        String
  body         String
  meta         Json?
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([type])
}

//
// Misc analytics tables (examples)
//
model AthleteAnalytics {
  athleteId   String  @id
  avgScore    Float?
  attendanceRate Float?
  updatedAt   DateTime @updatedAt
}

model InstitutionAnalytics {
  institutionId String @id
  avgPerformance Float?
  attendanceRate Float?
  updatedAt DateTime @updatedAt
}

model PlatformAnalytics {
  id           Int     @id @default(1)
  totalAthletes Int
  totalInstitutions Int
  totalSessions Int
  avgPerformance Float?
  updatedAt DateTime @updatedAt
}