// src/types/billing.d.ts
/**
 * types/billing.d.ts
 * ---------------------------------------------------------------------
 * Central type definitions for billing, invoicing, and payment tracking.
 *
 * Covers:
 *  - Unified structure for Stripe, Razorpay, and manual billing
 *  - Auto-renewal, refunds, taxes, and invoice management
 *  - Audit-safe, compliant with financial tracking standards
 *  - Ready for multi-currency international expansion
 * ---------------------------------------------------------------------
 */

import { PlanTier } from "./plans.d";

export type PaymentProvider = "stripe" | "razorpay" | "manual";
export type PaymentStatus =
  | "pending"
  | "succeeded"
  | "failed"
  | "refunded"
  | "disputed"
  | "cancelled";

export type InvoiceStatus =
  | "draft"
  | "open"
  | "paid"
  | "void"
  | "uncollectible";

/**
 * üí≥ Payment Record
 * ------------------------------------------------------------------
 * Represents a single transaction attempt (success or failure).
 */
export interface PaymentRecord {
  id: string;
  institutionId: string;
  planId: string;
  provider: PaymentProvider;
  providerPaymentId?: string; // e.g. Stripe payment_intent id, Razorpay payment id
  providerCustomerId?: string;
  amountCents: number;
  currency: string;
  status: PaymentStatus;
  failureReason?: string;
  refundAmountCents?: number;
  refundedAt?: Date;
  invoiceId?: string;
  autoRenew: boolean;
  attemptCount: number;
  metadata?: Record<string, any>;
  createdAt: Date;
  updatedAt: Date;
}

/**
 * üßæ Invoice
 * ------------------------------------------------------------------
 * Represents a formal record of payment issued to an institution.
 * May or may not correspond 1:1 with a payment record.
 */
export interface Invoice {
  id: string;
  institutionId: string;
  planId: string;
  status: InvoiceStatus;
  provider: PaymentProvider;
  providerInvoiceId?: string;
  amountCents: number;
  taxCents?: number;
  currency: string;
  issueDate: Date;
  dueDate: Date;
  paidAt?: Date;
  lineItems: InvoiceLineItem[];
  notes?: string;
  pdfUrl?: string;
  autoGenerated: boolean;
  createdAt: Date;
  updatedAt: Date;
}

/**
 * üì¶ Invoice Line Item
 * ------------------------------------------------------------------
 * Breaks down each invoice into individual components.
 */
export interface InvoiceLineItem {
  id: string;
  description: string;
  amountCents: number;
  quantity?: number;
  metadata?: Record<string, any>;
}

/**
 * üßÆ Tax Information
 * ------------------------------------------------------------------
 * For compliance and accurate billing totals.
 */
export interface TaxDetail {
  jurisdiction: string; // e.g., "IN-GST", "US-CA"
  ratePercent: number;
  amountCents: number;
  type: "GST" | "VAT" | "ServiceTax" | "SalesTax" | "None";
}

/**
 * üí∞ Billing Summary
 * ------------------------------------------------------------------
 * Returned to admin panels or dashboards to summarize all billing data.
 */
export interface BillingSummary {
  institutionId: string;
  currentPlanTier: PlanTier;
  totalPaidCents: number;
  totalRefundedCents: number;
  activeSubscriptionCount: number;
  failedPaymentCount: number;
  currency: string;
  lastPaymentDate?: Date;
  nextRenewalDate?: Date;
  outstandingBalanceCents?: number;
  autoRenewEnabled: boolean;
}

/**
 * ‚öôÔ∏è Refund Record
 * ------------------------------------------------------------------
 * Tracks refunds for both automatic and manual processes.
 */
export interface RefundRecord {
  id: string;
  paymentId: string;
  amountCents: number;
  currency: string;
  reason?: string;
  status: "pending" | "completed" | "failed";
  processedAt?: Date;
  createdAt: Date;
}

/**
 * üß© Provider Charge Object (Normalized)
 * ------------------------------------------------------------------
 * Unified structure for payment gateway responses.
 */
export interface ProviderCharge {
  id: string;
  provider: PaymentProvider;
  providerChargeId: string;
  amountCents: number;
  currency: string;
  status: PaymentStatus;
  receiptUrl?: string;
  captured: boolean;
  refunded: boolean;
  createdAt: Date;
  updatedAt: Date;
  metadata?: Record<string, any>;
}

/**
 * üîî Payment Alert
 * ------------------------------------------------------------------
 * Used by workers & alerting systems to notify admins or super admin.
 */
export interface PaymentAlert {
  type:
    | "failed_payment"
    | "payment_refunded"
    | "subscription_expired"
    | "auto_renew_failed";
  institutionId: string;
  planId?: string;
  paymentId?: string;
  severity: "info" | "warning" | "critical";
  message: string;
  createdAt: Date;
}

/**
 * üßæ Aggregated Billing Report
 * ------------------------------------------------------------------
 * Used by super admin dashboards for financial overviews.
 */
export interface BillingReport {
  totalRevenueCents: number;
  totalRefundsCents: number;
  activeSubscribers: number;
  expiringTrials: number;
  failedPayments: number;
  currency: string;
  generatedAt: Date;
}