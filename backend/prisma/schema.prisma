// ───────────────────────────────
// ⚙️ PRISMA SETUP
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ───────────────────────────────
// 👤 USER MODEL
model User {
  id              String              @id @default(uuid())
  username        String              @unique
  email           String?             @unique
  passwordHash    String
  name            String?
  role            Role                @default(athlete)
  coachCode       String?             @unique
  institutionId   String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  settings        Json?

  // ── Relations
  institution     Institution?        @relation("UserInstitution", fields: [institutionId], references: [id], onDelete: SetNull)
  tokens          RefreshToken[]
  athlete         Athlete?            @relation("UserAthlete")
  coachInstitutions CoachInstitution[] @relation("UserCoachInstitution")

  // ── Communication & Resources
  sentMessages     Message[]          @relation("SenderMessages")
  receivedMessages Message[]          @relation("ReceiverMessages")
  uploadedResources Resource[]        @relation("UploadedResources")
  receivedResources ResourceShare[]   @relation("ReceivedResources")

  // ── Approvals & Admin
  approvedAthletes Athlete[]          @relation("ApprovedByUser")
  adminInstitutions Institution[]     @relation("InstitutionAdmin")

  // ── Invitations
  sentInvitations     Invitation[]    @relation("SentInvitations")
  receivedInvitations Invitation[]    @relation("ReceivedInvitations")
}

// ───────────────────────────────
// 🔑 REFRESH TOKENS
model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String
  revoked   Boolean  @default(false)
  issuedAt  DateTime @default(now())
  expiresAt DateTime
  @@index([userId])
}

// ───────────────────────────────
// 🏫 INSTITUTION MODEL
model Institution {
  id            String             @id @default(uuid())
  name          String
  code          String             @unique
  address       String?
  contactEmail  String?
  contactNumber String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  athletes      Athlete[]
  coaches       CoachInstitution[]
  admin         User[]             @relation("InstitutionAdmin")
  competitions  Competition[]
  resources     Resource[]
  users         User[]             @relation("UserInstitution")
}

// ───────────────────────────────
// 👨‍🏫 COACH-INSTITUTION LINK
model CoachInstitution {
  id             String       @id @default(uuid())
  coachId        String
  institutionId  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  coach          User         @relation("UserCoachInstitution", fields: [coachId], references: [id], onDelete: Cascade)
  institution    Institution  @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  @@unique([coachId, institutionId])
}

// ───────────────────────────────
// 🧍 ATHLETE MODEL
model Athlete {
  id            String          @id @default(uuid())
  userId        String          @unique
  athleteCode   String          @unique
  name          String
  dob           DateTime?
  sport         String?
  gender        String?
  contactInfo   String?
  approved      Boolean         @default(false)
  approvedBy    String?
  institutionId String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user          User            @relation("UserAthlete", fields: [userId], references: [id], onDelete: Cascade)
  approver      User?           @relation("ApprovedByUser", fields: [approvedBy], references: [id])
  institution   Institution?    @relation(fields: [institutionId], references: [id], onDelete: SetNull)

  sessions      Session[]       @relation("AthleteSessions")
  assessments   Assessment[]
  injuries      Injury[]
  performances  Performance[]
  attendance    Attendance[]
  competitions  AthleteCompetition[]

  @@index([institutionId])
  @@index([approved])
}

// ───────────────────────────────
// 📨 INVITATION SYSTEM
model Invitation {
  id             String        @id @default(uuid())
  code           String        @unique
  senderId       String
  receiverEmail  String
  role           Role          @default(athlete)
  institutionId  String?
  status         InviteStatus  @default(pending)
  expiresAt      DateTime
  createdAt      DateTime      @default(now())
  acceptedAt     DateTime?
  revokedAt      DateTime?

  sender         User          @relation("SentInvitations", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User?         @relation("ReceivedInvitations", fields: [receiverEmail], references: [email], onDelete: SetNull)
  institution    Institution?  @relation(fields: [institutionId], references: [id], onDelete: SetNull)

  @@index([institutionId])
  @@index([status])
}

// ───────────────────────────────
// 🏟️ COMPETITION SYSTEM
model Competition {
  id             String                @id @default(uuid())
  name           String
  location       String?
  startDate      DateTime
  endDate        DateTime?
  institutionId  String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  institution    Institution?          @relation(fields: [institutionId], references: [id])
  participants   AthleteCompetition[]

  @@index([institutionId])
}

model AthleteCompetition {
  id                String       @id @default(uuid())
  athleteId         String
  competitionId     String
  result            String?
  position          Int?
  performanceNotes  String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  athlete           Athlete      @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  competition       Competition  @relation(fields: [competitionId], references: [id], onDelete: Cascade)

  @@unique([athleteId, competitionId])
}

// ───────────────────────────────
// 💬 MESSAGING SYSTEM
model Message {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String
  title       String
  content     String
  attachments Json?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  sender      User     @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceiverMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([receiverId, read])
}

// ───────────────────────────────
// 📂 RESOURCE SHARING SYSTEM
model Resource {
  id             String         @id @default(uuid())
  uploaderId     String
  institutionId  String?
  title          String
  description    String?
  type           String?
  fileUrl        String?
  visibility     ResourceVisibility @default(private)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  uploader       User           @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  institution    Institution?   @relation(fields: [institutionId], references: [id], onDelete: SetNull)
  sharedWith     ResourceShare[]

  @@index([institutionId])
  @@index([visibility])
}

model ResourceShare {
  id           String     @id @default(uuid())
  resourceId   String
  receiverId   String
  createdAt    DateTime   @default(now())

  resource     Resource   @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  receiver     User       @relation("ReceivedResources", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([resourceId, receiverId])
}

// ───────────────────────────────
// 📊 TRAINING & PERFORMANCE MODELS
model Session {
  id            String          @id @default(uuid())
  name          String
  coachId       String?
  date          DateTime
  duration      Int?
  notes         String?
  institutionId String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  assessments   Assessment[]
  attendance    Attendance[]
  athletes      Athlete[]       @relation("AthleteSessions")
}

model Assessment {
  id            String    @id @default(uuid())
  athleteId     String
  athlete       Athlete   @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  sessionId     String?
  session       Session?  @relation(fields: [sessionId], references: [id])
  institutionId String?
  metric        String
  valueText     String?
  valueNumber   Float?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Performance {
  id             String    @id @default(uuid())
  athleteId      String
  athlete        Athlete   @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  assessmentType String
  score          Float
  date           DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Injury {
  id          String    @id @default(uuid())
  athleteId   String
  athlete     Athlete   @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  description String
  date        DateTime
  severity    Severity
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Attendance {
  id         String            @id @default(uuid())
  sessionId  String
  session    Session           @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  athleteId  String
  athlete    Athlete           @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  status     AttendanceStatus
  remarks    String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@unique([sessionId, athleteId])
}

// ───────────────────────────────
// ENUMS
enum Role {
  admin
  coach
  athlete
}

enum Severity {
  minor
  moderate
  severe
}

enum AttendanceStatus {
  present
  absent
  late
}

enum InviteStatus {
  pending
  accepted
  revoked
  expired
}

enum ResourceVisibility {
  private
  institution
  public
}