generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(uuid())
  username     String          @unique
  email        String?         @unique
  passwordHash String
  name         String?
  role         Role            @default(athlete)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  settings     Json?

  // Relationships
  tokens       RefreshToken[]
  athlete      Athlete?        @relation("UserAthlete")
  approvedAthletes Athlete[]   @relation("ApprovedByUser")
  messagesSent  Message[]      @relation("SenderMessages")
  messagesReceived Message[]   @relation("ReceiverMessages")
  institution   Institution?   @relation("InstitutionAdmin", fields: [institutionId], references: [id])
  institutionId String?        // if this user belongs to an institution (coach or athlete)

  @@index([role])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String
  revoked   Boolean  @default(false)
  issuedAt  DateTime @default(now())
  expiresAt DateTime
}

// ───────────────────────────────
// 🏫 Institution (e.g. school, academy, university)
model Institution {
  id            String             @id @default(uuid())
  name          String
  code          String             @unique
  address       String?
  contactEmail  String?
  contactNumber String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  // Relations
  athletes      Athlete[]
  coaches       CoachInstitution[]
  admin         User[]             @relation("InstitutionAdmin")

  competitions  Competition[]
}

// ───────────────────────────────
// 👨‍🏫 CoachInstitution (connects coaches to institutions)
model CoachInstitution {
  id             String     @id @default(uuid())
  coachId        String
  institutionId  String
  coach          User       @relation(fields: [coachId], references: [id], onDelete: Cascade)
  institution    Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  assignedSince  DateTime   @default(now())

  @@unique([coachId, institutionId])
}

// ───────────────────────────────
// 🧍 Athlete (linked to user)
model Athlete {
  id            String          @id @default(uuid())
  userId        String          @unique
  athleteCode   String          @unique
  name          String
  dob           DateTime?
  sport         String?
  gender        String?
  contactInfo   String?
  approved      Boolean         @default(false)
  approvedBy    String?         // userId of coach/admin who approved
  institutionId String?         // institution the athlete belongs to
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user          User            @relation("UserAthlete", fields: [userId], references: [id], onDelete: Cascade)
  approver      User?           @relation("ApprovedByUser", fields: [approvedBy], references: [id])
  institution   Institution?    @relation(fields: [institutionId], references: [id], onDelete: SetNull)

  sessions      Session[]       @relation("AthleteSessions")
  assessments   Assessment[]
  injuries      Injury[]
  performances  Performance[]
  attendance    Attendance[]
  competitions  AthleteCompetition[]
}

// ───────────────────────────────
// 🏟️ Competition & Participation Records
model Competition {
  id             String                @id @default(uuid())
  name           String
  location       String?
  startDate      DateTime
  endDate        DateTime?
  institutionId  String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  institution    Institution?          @relation(fields: [institutionId], references: [id])
  participants   AthleteCompetition[]
}

// Junction table linking athletes to competitions
model AthleteCompetition {
  id             String       @id @default(uuid())
  athleteId      String
  competitionId  String
  result         String?      // e.g. "Gold", "Silver", "Participant"
  position       Int?
  performanceNotes String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  athlete        Athlete      @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  competition    Competition  @relation(fields: [competitionId], references: [id], onDelete: Cascade)

  @@unique([athleteId, competitionId])
}

// ───────────────────────────────
// 💬 Message/Notice System
model Message {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String
  title       String
  content     String
  attachments Json?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  sender      User     @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceiverMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

// ───────────────────────────────
// Existing Models (unchanged core logic)
model Session {
  id            String          @id @default(uuid())
  name          String
  coachId       String?
  date          DateTime
  duration      Int?
  notes         String?
  institutionId String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  assessments   Assessment[]
  attendance    Attendance[]
  athletes      Athlete[]       @relation("AthleteSessions")
}

model Assessment {
  id            String    @id @default(uuid())
  athleteId     String
  athlete       Athlete   @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  sessionId     String?
  session       Session?  @relation(fields: [sessionId], references: [id])
  institutionId String?
  metric        String
  valueText     String?
  valueNumber   Float?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Performance {
  id             String    @id @default(uuid())
  athleteId      String
  athlete        Athlete   @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  assessmentType String
  score          Float
  date           DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Injury {
  id          String    @id @default(uuid())
  athleteId   String
  athlete     Athlete   @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  description String
  date        DateTime
  severity    Severity
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Attendance {
  id         String            @id @default(uuid())
  sessionId  String
  session    Session           @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  athleteId  String
  athlete    Athlete           @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  status     AttendanceStatus
  remarks    String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@unique([sessionId, athleteId])
}

// ───────────────────────────────
// Enums
enum Role {
  admin
  coach
  athlete
}

enum Severity {
  minor
  moderate
  severe
}

enum AttendanceStatus {
  present
  absent
  late
}