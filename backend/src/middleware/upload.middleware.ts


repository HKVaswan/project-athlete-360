// src/middleware/upload.middleware.ts
import multer from "multer";
import path from "path";
import fs from "fs";
import { Request } from "express";

// ───────────────────────────────
// 🗂️ Ensure upload directory exists
// ───────────────────────────────
const uploadDir = path.join(__dirname, "../../uploads");
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// ───────────────────────────────
// ⚙️ Multer Storage Configuration
// For local storage. You can later switch to cloud adapters (S3, Cloudinary).
// ───────────────────────────────
const storage = multer.diskStorage({
  destination: (_req, _file, cb) => {
    cb(null, uploadDir);
  },
  filename: (_req, file, cb) => {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    const safeName = file.originalname.replace(/\s+/g, "_");
    cb(null, `${uniqueSuffix}-${safeName}`);
  },
});

// ───────────────────────────────
// 🧹 File Type Filtering
// Prevents unwanted uploads (executables, scripts, etc.)
// ───────────────────────────────
function fileFilter(_req: Request, file: Express.Multer.File, cb: multer.FileFilterCallback) {
  const allowedTypes = [
    "image/jpeg",
    "image/png",
    "application/pdf",
    "video/mp4",
    "text/plain",
  ];
  if (!allowedTypes.includes(file.mimetype)) {
    return cb(new Error("Unsupported file type"));
  }
  cb(null, true);
}

// ───────────────────────────────
// 🚀 Multer Upload Config
// Limits file size and type for safety
// ───────────────────────────────
const upload = multer({
  storage,
  fileFilter,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB limit
  },
});

// ───────────────────────────────
// ☁️ Optional Cloud Integration (Example)
// Future expansion: AWS S3 or Cloudinary
// You can easily adapt this middleware later for cloud uploads by replacing
// the `storage` config with multer-s3 or multer-storage-cloudinary.
// ───────────────────────────────

// ───────────────────────────────
// 🧩 Exports
// ───────────────────────────────
export const uploadSingle = (fieldName: string) => upload.single(fieldName);
export const uploadMultiple = (fieldName: string, maxCount = 5) =>
  upload.array(fieldName, maxCount);
export const uploadFields = (fields: { name: string; maxCount: number }[]) =>
  upload.fields(fields);

export default upload;